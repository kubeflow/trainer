// Copyright 2024 The Kubeflow Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/client-go/applyconfigurations/meta/v1"
)

// PodTemplateOverrideApplyConfiguration represents a declarative configuration of the PodTemplateOverride type for use
// with apply.
type PodTemplateOverrideApplyConfiguration struct {
	TargetJobs []PodTemplateOverrideTargetJobApplyConfiguration `json:"targetJobs,omitempty"`
	Metadata   *v1.ObjectMetaApplyConfiguration                 `json:"metadata,omitempty"`
	Spec       *PodTemplateSpecOverrideApplyConfiguration       `json:"spec,omitempty"`
}

// PodTemplateOverrideApplyConfiguration constructs a declarative configuration of the PodTemplateOverride type for use with
// apply.
func PodTemplateOverride() *PodTemplateOverrideApplyConfiguration {
	return &PodTemplateOverrideApplyConfiguration{}
}

// WithTargetJobs adds the given value to the TargetJobs field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the TargetJobs field.
func (b *PodTemplateOverrideApplyConfiguration) WithTargetJobs(values ...*PodTemplateOverrideTargetJobApplyConfiguration) *PodTemplateOverrideApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithTargetJobs")
		}
		b.TargetJobs = append(b.TargetJobs, *values[i])
	}
	return b
}

// WithMetadata sets the Metadata field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Metadata field is set to the value of the last call.
func (b *PodTemplateOverrideApplyConfiguration) WithMetadata(value *v1.ObjectMetaApplyConfiguration) *PodTemplateOverrideApplyConfiguration {
	b.Metadata = value
	return b
}

// WithSpec sets the Spec field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Spec field is set to the value of the last call.
func (b *PodTemplateOverrideApplyConfiguration) WithSpec(value *PodTemplateSpecOverrideApplyConfiguration) *PodTemplateOverrideApplyConfiguration {
	b.Spec = value
	return b
}

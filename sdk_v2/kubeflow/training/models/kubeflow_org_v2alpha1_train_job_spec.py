# coding: utf-8

"""
    Kubeflow Training OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.training.configuration import Configuration


class KubeflowOrgV2alpha1TrainJobSpec(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'annotations': 'dict(str, str)',
        'dataset_config': 'KubeflowOrgV2alpha1DatasetConfig',
        'labels': 'dict(str, str)',
        'managed_by': 'str',
        'model_config': 'KubeflowOrgV2alpha1ModelConfig',
        'pod_spec_overrides': 'list[KubeflowOrgV2alpha1PodSpecOverride]',
        'runtime_ref': 'KubeflowOrgV2alpha1RuntimeRef',
        'suspend': 'bool',
        'trainer': 'KubeflowOrgV2alpha1Trainer'
    }

    attribute_map = {
        'annotations': 'annotations',
        'dataset_config': 'datasetConfig',
        'labels': 'labels',
        'managed_by': 'managedBy',
        'model_config': 'modelConfig',
        'pod_spec_overrides': 'podSpecOverrides',
        'runtime_ref': 'runtimeRef',
        'suspend': 'suspend',
        'trainer': 'trainer'
    }

    def __init__(self, annotations=None, dataset_config=None, labels=None, managed_by=None, model_config=None, pod_spec_overrides=None, runtime_ref=None, suspend=None, trainer=None, local_vars_configuration=None):  # noqa: E501
        """KubeflowOrgV2alpha1TrainJobSpec - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._annotations = None
        self._dataset_config = None
        self._labels = None
        self._managed_by = None
        self._model_config = None
        self._pod_spec_overrides = None
        self._runtime_ref = None
        self._suspend = None
        self._trainer = None
        self.discriminator = None

        if annotations is not None:
            self.annotations = annotations
        if dataset_config is not None:
            self.dataset_config = dataset_config
        if labels is not None:
            self.labels = labels
        if managed_by is not None:
            self.managed_by = managed_by
        if model_config is not None:
            self.model_config = model_config
        if pod_spec_overrides is not None:
            self.pod_spec_overrides = pod_spec_overrides
        self.runtime_ref = runtime_ref
        if suspend is not None:
            self.suspend = suspend
        if trainer is not None:
            self.trainer = trainer

    @property
    def annotations(self):
        """Gets the annotations of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501

        Annotations to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.  # noqa: E501

        :return: The annotations of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._annotations

    @annotations.setter
    def annotations(self, annotations):
        """Sets the annotations of this KubeflowOrgV2alpha1TrainJobSpec.

        Annotations to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.  # noqa: E501

        :param annotations: The annotations of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._annotations = annotations

    @property
    def dataset_config(self):
        """Gets the dataset_config of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501


        :return: The dataset_config of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: KubeflowOrgV2alpha1DatasetConfig
        """
        return self._dataset_config

    @dataset_config.setter
    def dataset_config(self, dataset_config):
        """Sets the dataset_config of this KubeflowOrgV2alpha1TrainJobSpec.


        :param dataset_config: The dataset_config of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: KubeflowOrgV2alpha1DatasetConfig
        """

        self._dataset_config = dataset_config

    @property
    def labels(self):
        """Gets the labels of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501

        Labels to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.  # noqa: E501

        :return: The labels of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this KubeflowOrgV2alpha1TrainJobSpec.

        Labels to apply for the derivative JobSet and Jobs. They will be merged with the TrainingRuntime values.  # noqa: E501

        :param labels: The labels of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: dict(str, str)
        """

        self._labels = labels

    @property
    def managed_by(self):
        """Gets the managed_by of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501

        ManagedBy is used to indicate the controller or entity that manages a TrainJob. The value must be either an empty, `kubeflow.org/trainjob-controller` or `kueue.x-k8s.io/multikueue`. The built-in TrainJob controller reconciles TrainJob which don't have this field at all or the field value is the reserved string `kubeflow.org/trainjob-controller`, but delegates reconciling TrainJobs with a 'kueue.x-k8s.io/multikueue' to the Kueue. The field is immutable. Defaults to `kubeflow.org/trainjob-controller`  # noqa: E501

        :return: The managed_by of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: str
        """
        return self._managed_by

    @managed_by.setter
    def managed_by(self, managed_by):
        """Sets the managed_by of this KubeflowOrgV2alpha1TrainJobSpec.

        ManagedBy is used to indicate the controller or entity that manages a TrainJob. The value must be either an empty, `kubeflow.org/trainjob-controller` or `kueue.x-k8s.io/multikueue`. The built-in TrainJob controller reconciles TrainJob which don't have this field at all or the field value is the reserved string `kubeflow.org/trainjob-controller`, but delegates reconciling TrainJobs with a 'kueue.x-k8s.io/multikueue' to the Kueue. The field is immutable. Defaults to `kubeflow.org/trainjob-controller`  # noqa: E501

        :param managed_by: The managed_by of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: str
        """

        self._managed_by = managed_by

    @property
    def model_config(self):
        """Gets the model_config of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501


        :return: The model_config of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: KubeflowOrgV2alpha1ModelConfig
        """
        return self._model_config

    @model_config.setter
    def model_config(self, model_config):
        """Sets the model_config of this KubeflowOrgV2alpha1TrainJobSpec.


        :param model_config: The model_config of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: KubeflowOrgV2alpha1ModelConfig
        """

        self._model_config = model_config

    @property
    def pod_spec_overrides(self):
        """Gets the pod_spec_overrides of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501

        Custom overrides for the training runtime.  # noqa: E501

        :return: The pod_spec_overrides of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: list[KubeflowOrgV2alpha1PodSpecOverride]
        """
        return self._pod_spec_overrides

    @pod_spec_overrides.setter
    def pod_spec_overrides(self, pod_spec_overrides):
        """Sets the pod_spec_overrides of this KubeflowOrgV2alpha1TrainJobSpec.

        Custom overrides for the training runtime.  # noqa: E501

        :param pod_spec_overrides: The pod_spec_overrides of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: list[KubeflowOrgV2alpha1PodSpecOverride]
        """

        self._pod_spec_overrides = pod_spec_overrides

    @property
    def runtime_ref(self):
        """Gets the runtime_ref of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501


        :return: The runtime_ref of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: KubeflowOrgV2alpha1RuntimeRef
        """
        return self._runtime_ref

    @runtime_ref.setter
    def runtime_ref(self, runtime_ref):
        """Sets the runtime_ref of this KubeflowOrgV2alpha1TrainJobSpec.


        :param runtime_ref: The runtime_ref of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: KubeflowOrgV2alpha1RuntimeRef
        """
        if self.local_vars_configuration.client_side_validation and runtime_ref is None:  # noqa: E501
            raise ValueError("Invalid value for `runtime_ref`, must not be `None`")  # noqa: E501

        self._runtime_ref = runtime_ref

    @property
    def suspend(self):
        """Gets the suspend of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501

        Whether the controller should suspend the running TrainJob. Defaults to false.  # noqa: E501

        :return: The suspend of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: bool
        """
        return self._suspend

    @suspend.setter
    def suspend(self, suspend):
        """Sets the suspend of this KubeflowOrgV2alpha1TrainJobSpec.

        Whether the controller should suspend the running TrainJob. Defaults to false.  # noqa: E501

        :param suspend: The suspend of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: bool
        """

        self._suspend = suspend

    @property
    def trainer(self):
        """Gets the trainer of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501


        :return: The trainer of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :rtype: KubeflowOrgV2alpha1Trainer
        """
        return self._trainer

    @trainer.setter
    def trainer(self, trainer):
        """Sets the trainer of this KubeflowOrgV2alpha1TrainJobSpec.


        :param trainer: The trainer of this KubeflowOrgV2alpha1TrainJobSpec.  # noqa: E501
        :type: KubeflowOrgV2alpha1Trainer
        """

        self._trainer = trainer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubeflowOrgV2alpha1TrainJobSpec):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubeflowOrgV2alpha1TrainJobSpec):
            return True

        return self.to_dict() != other.to_dict()

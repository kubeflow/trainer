# coding: utf-8

"""
    Kubeflow Training OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.training.configuration import Configuration


class KubeflowOrgV2alpha1DatasetConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'env': 'list[V1EnvVar]',
        'secret_ref': 'V1LocalObjectReference',
        'storage_uri': 'str'
    }

    attribute_map = {
        'env': 'env',
        'secret_ref': 'secretRef',
        'storage_uri': 'storageUri'
    }

    def __init__(self, env=None, secret_ref=None, storage_uri=None, local_vars_configuration=None):  # noqa: E501
        """KubeflowOrgV2alpha1DatasetConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._env = None
        self._secret_ref = None
        self._storage_uri = None
        self.discriminator = None

        if env is not None:
            self.env = env
        if secret_ref is not None:
            self.secret_ref = secret_ref
        if storage_uri is not None:
            self.storage_uri = storage_uri

    @property
    def env(self):
        """Gets the env of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501

        List of environment variables to set in the dataset initializer container. These values will be merged with the TrainingRuntime's dataset initializer environments.  # noqa: E501

        :return: The env of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501
        :rtype: list[V1EnvVar]
        """
        return self._env

    @env.setter
    def env(self, env):
        """Sets the env of this KubeflowOrgV2alpha1DatasetConfig.

        List of environment variables to set in the dataset initializer container. These values will be merged with the TrainingRuntime's dataset initializer environments.  # noqa: E501

        :param env: The env of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501
        :type: list[V1EnvVar]
        """

        self._env = env

    @property
    def secret_ref(self):
        """Gets the secret_ref of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501


        :return: The secret_ref of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501
        :rtype: V1LocalObjectReference
        """
        return self._secret_ref

    @secret_ref.setter
    def secret_ref(self, secret_ref):
        """Sets the secret_ref of this KubeflowOrgV2alpha1DatasetConfig.


        :param secret_ref: The secret_ref of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501
        :type: V1LocalObjectReference
        """

        self._secret_ref = secret_ref

    @property
    def storage_uri(self):
        """Gets the storage_uri of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501

        Storage uri for the dataset provider.  # noqa: E501

        :return: The storage_uri of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501
        :rtype: str
        """
        return self._storage_uri

    @storage_uri.setter
    def storage_uri(self, storage_uri):
        """Sets the storage_uri of this KubeflowOrgV2alpha1DatasetConfig.

        Storage uri for the dataset provider.  # noqa: E501

        :param storage_uri: The storage_uri of this KubeflowOrgV2alpha1DatasetConfig.  # noqa: E501
        :type: str
        """

        self._storage_uri = storage_uri

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubeflowOrgV2alpha1DatasetConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubeflowOrgV2alpha1DatasetConfig):
            return True

        return self.to_dict() != other.to_dict()

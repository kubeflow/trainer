# coding: utf-8

"""
    Kubeflow Training OpenAPI Spec

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from kubeflow.training.configuration import Configuration


class KubeflowOrgV2alpha1PodSpecOverride(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'containers': 'list[KubeflowOrgV2alpha1ContainerOverride]',
        'init_containers': 'list[KubeflowOrgV2alpha1ContainerOverride]',
        'node_selector': 'dict(str, str)',
        'service_account_name': 'str',
        'target_jobs': 'list[KubeflowOrgV2alpha1PodSpecOverrideTargetJob]',
        'tolerations': 'list[V1Toleration]',
        'volumes': 'list[V1Volume]'
    }

    attribute_map = {
        'containers': 'containers',
        'init_containers': 'initContainers',
        'node_selector': 'nodeSelector',
        'service_account_name': 'serviceAccountName',
        'target_jobs': 'targetJobs',
        'tolerations': 'tolerations',
        'volumes': 'volumes'
    }

    def __init__(self, containers=None, init_containers=None, node_selector=None, service_account_name=None, target_jobs=None, tolerations=None, volumes=None, local_vars_configuration=None):  # noqa: E501
        """KubeflowOrgV2alpha1PodSpecOverride - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._containers = None
        self._init_containers = None
        self._node_selector = None
        self._service_account_name = None
        self._target_jobs = None
        self._tolerations = None
        self._volumes = None
        self.discriminator = None

        if containers is not None:
            self.containers = containers
        if init_containers is not None:
            self.init_containers = init_containers
        if node_selector is not None:
            self.node_selector = node_selector
        if service_account_name is not None:
            self.service_account_name = service_account_name
        self.target_jobs = target_jobs
        if tolerations is not None:
            self.tolerations = tolerations
        if volumes is not None:
            self.volumes = volumes

    @property
    def containers(self):
        """Gets the containers of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501

        Overrides for the containers in the desired job templates.  # noqa: E501

        :return: The containers of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :rtype: list[KubeflowOrgV2alpha1ContainerOverride]
        """
        return self._containers

    @containers.setter
    def containers(self, containers):
        """Sets the containers of this KubeflowOrgV2alpha1PodSpecOverride.

        Overrides for the containers in the desired job templates.  # noqa: E501

        :param containers: The containers of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :type: list[KubeflowOrgV2alpha1ContainerOverride]
        """

        self._containers = containers

    @property
    def init_containers(self):
        """Gets the init_containers of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501

        Overrides for the init container in the desired job templates.  # noqa: E501

        :return: The init_containers of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :rtype: list[KubeflowOrgV2alpha1ContainerOverride]
        """
        return self._init_containers

    @init_containers.setter
    def init_containers(self, init_containers):
        """Sets the init_containers of this KubeflowOrgV2alpha1PodSpecOverride.

        Overrides for the init container in the desired job templates.  # noqa: E501

        :param init_containers: The init_containers of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :type: list[KubeflowOrgV2alpha1ContainerOverride]
        """

        self._init_containers = init_containers

    @property
    def node_selector(self):
        """Gets the node_selector of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501

        Override for the node selector to place Pod on the specific mode.  # noqa: E501

        :return: The node_selector of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._node_selector

    @node_selector.setter
    def node_selector(self, node_selector):
        """Sets the node_selector of this KubeflowOrgV2alpha1PodSpecOverride.

        Override for the node selector to place Pod on the specific mode.  # noqa: E501

        :param node_selector: The node_selector of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :type: dict(str, str)
        """

        self._node_selector = node_selector

    @property
    def service_account_name(self):
        """Gets the service_account_name of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501

        Override for the service account.  # noqa: E501

        :return: The service_account_name of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :rtype: str
        """
        return self._service_account_name

    @service_account_name.setter
    def service_account_name(self, service_account_name):
        """Sets the service_account_name of this KubeflowOrgV2alpha1PodSpecOverride.

        Override for the service account.  # noqa: E501

        :param service_account_name: The service_account_name of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :type: str
        """

        self._service_account_name = service_account_name

    @property
    def target_jobs(self):
        """Gets the target_jobs of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501

        TrainJobs is the training job replicas in the training runtime template to apply the overrides.  # noqa: E501

        :return: The target_jobs of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :rtype: list[KubeflowOrgV2alpha1PodSpecOverrideTargetJob]
        """
        return self._target_jobs

    @target_jobs.setter
    def target_jobs(self, target_jobs):
        """Sets the target_jobs of this KubeflowOrgV2alpha1PodSpecOverride.

        TrainJobs is the training job replicas in the training runtime template to apply the overrides.  # noqa: E501

        :param target_jobs: The target_jobs of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :type: list[KubeflowOrgV2alpha1PodSpecOverrideTargetJob]
        """
        if self.local_vars_configuration.client_side_validation and target_jobs is None:  # noqa: E501
            raise ValueError("Invalid value for `target_jobs`, must not be `None`")  # noqa: E501

        self._target_jobs = target_jobs

    @property
    def tolerations(self):
        """Gets the tolerations of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501

        Override for the Pod's tolerations.  # noqa: E501

        :return: The tolerations of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :rtype: list[V1Toleration]
        """
        return self._tolerations

    @tolerations.setter
    def tolerations(self, tolerations):
        """Sets the tolerations of this KubeflowOrgV2alpha1PodSpecOverride.

        Override for the Pod's tolerations.  # noqa: E501

        :param tolerations: The tolerations of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :type: list[V1Toleration]
        """

        self._tolerations = tolerations

    @property
    def volumes(self):
        """Gets the volumes of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501

        Overrides for the Pod volume configuration.  # noqa: E501

        :return: The volumes of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :rtype: list[V1Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes):
        """Sets the volumes of this KubeflowOrgV2alpha1PodSpecOverride.

        Overrides for the Pod volume configuration.  # noqa: E501

        :param volumes: The volumes of this KubeflowOrgV2alpha1PodSpecOverride.  # noqa: E501
        :type: list[V1Volume]
        """

        self._volumes = volumes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KubeflowOrgV2alpha1PodSpecOverride):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, KubeflowOrgV2alpha1PodSpecOverride):
            return True

        return self.to_dict() != other.to_dict()
